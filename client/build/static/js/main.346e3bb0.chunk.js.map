{"version":3,"sources":["components/navbar.component.js","components/exercises-list.component.js","components/edit-exercises.component.js","components/create-exercise.component.js","components/create-user.component.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Component","ExercisesList","props","deleteExercise","bind","state","exercises","Axios","get","then","response","console","log","data","catch","error","id","delete","res","this","setState","filter","el","_id","exerciseList","EditExercise","onChangeUsername","onChangeDescription","onChangeDuration","onChangeDate","onSubmit","username","description","duration","date","Date","users","axios","match","params","length","map","user","e","target","value","preventDefault","exercise","post","window","location","ref","required","onChange","type","selected","CreateExercise","key","CreateUser","App","path","exact","component","EditExercises","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yQAGqBA,E,uKAGjB,OACE,yBAAKC,UAAU,+CACb,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,gBAAvB,gBACA,yBAAKA,UAAU,4BACf,wBAAIA,UAAU,sBACZ,wBAAIA,UAAU,eACd,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,YAAvB,cAEA,wBAAIA,UAAU,eACd,kBAAC,IAAD,CAAMC,GAAG,UAAUD,UAAU,YAA7B,wBAEA,wBAAIA,UAAU,eACd,kBAAC,IAAD,CAAMC,GAAG,QAAQD,UAAU,YAA3B,uB,GAf0BE,a,wBCcfC,E,kDACnB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,MAAQ,CACXC,UAAW,IAJG,E,gEAShBC,IAAMC,IAAI,eACTC,MAAK,SAAAC,GAIJC,QAAQC,IAAI,gBAAiBF,EAASG,SAErCC,OAAM,SAACC,GACNJ,QAAQC,IAAI,gBAAiBG,Q,qCAIpBC,GACbT,IAAMU,OAAO,cAAcD,GAC1BP,MAAK,SAAAS,GAAG,OAAIP,QAAQC,IAAIM,EAAIL,SAC7BM,KAAKC,SAAS,CACZd,UAAWa,KAAKd,MAAMC,UAAUe,QAAO,SAAAC,GAAE,OAAIA,EAAGC,MAAQP,S,qCAY1D,OAAOG,KAAKd,MAAMC,Y,+BAKlB,OACE,6BACE,gDACA,2BAAOR,UAAU,SACf,2BAAOA,UAAU,eACf,4BACE,wCACA,2CACA,wCACA,oCACA,yCAGJ,+BACEqB,KAAKK,sB,GAzD0BxB,a,iBCZtByB,G,wDACnB,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IAEDwB,iBAAmB,EAAKA,iBAAiBtB,KAAtB,gBACxB,EAAKuB,oBAAsB,EAAKA,oBAAoBvB,KAAzB,gBAC3B,EAAKwB,iBAAmB,EAAKA,iBAAiBxB,KAAtB,gBACxB,EAAKyB,aAAe,EAAKA,aAAazB,KAAlB,gBACpB,EAAK0B,SAAW,EAAKA,SAAS1B,KAAd,gBAEhB,EAAKC,MAAQ,CACX0B,SAAU,GACVC,YAAa,GACbC,SAAU,EACVC,KAAM,IAAIC,KACVC,MAAO,IAdQ,E,gEAkBE,IAAD,OAClBC,IAAM7B,IAAI,cAAcW,KAAKjB,MAAMoC,MAAMC,OAAOvB,IAC7CP,MAAK,SAAAC,GACJ,EAAKU,SAAS,CACZW,SAAUrB,EAASG,KAAKkB,SACxBC,YAAatB,EAASG,KAAKmB,YAC3BC,SAAUvB,EAASG,KAAKoB,SACxBC,KAAM,IAAIC,KAAKzB,EAASG,KAAKqB,WAGhCpB,OAAM,SAAUC,GACfJ,QAAQC,IAAIG,MAGhBsB,IAAM7B,IAAI,UACPC,MAAK,SAAAC,GACAA,EAASG,KAAK2B,OAAS,GACzB,EAAKpB,SAAS,CACZgB,MAAO1B,EAASG,KAAK4B,KAAI,SAAAC,GAAI,OAAIA,EAAKX,iBAI3CjB,OAAM,SAACC,GACNJ,QAAQC,IAAIG,Q,uCAKD4B,GACfxB,KAAKC,SAAS,CACZW,SAAUY,EAAEC,OAAOC,U,0CAIHF,GAClBxB,KAAKC,SAAS,CACZY,YAAaW,EAAEC,OAAOC,U,uCAITF,GACfxB,KAAKC,SAAS,CACZa,SAAUU,EAAEC,OAAOC,U,mCAIVX,GACXf,KAAKC,SAAS,CACZc,KAAMA,M,+BAIDS,GACPA,EAAEG,iBAEF,IAAMC,EAAW,CACfhB,SAAUZ,KAAKd,MAAM0B,SACrBC,YAAab,KAAKd,MAAM2B,YACxBC,SAAUd,KAAKd,MAAM4B,SACrBC,KAAMf,KAAKd,MAAM6B,MAGnBvB,QAAQC,IAAImC,GAEZV,IAAMW,KAAK,qBAAuB7B,KAAKjB,MAAMoC,MAAMC,OAAOvB,GAAI+B,GAC3DtC,MAAK,SAAAS,GAAG,OAAIP,QAAQC,IAAIM,EAAIL,SAE/BoC,OAAOC,SAAW,M,+BAIlB,OACA,6BACE,iDACA,0BAAMpB,SAAUX,KAAKW,UACnB,yBAAKhC,UAAU,cACb,6CACA,4BAAQqD,IAAI,YACRC,UAAQ,EACRtD,UAAU,eACV+C,MAAO1B,KAAKd,MAAM0B,SAClBsB,SAAUlC,KAAKO,oBAYrB,yBAAK5B,UAAU,cACb,gDACA,2BAAQwD,KAAK,OACTF,UAAQ,EACRtD,UAAU,eACV+C,MAAO1B,KAAKd,MAAM2B,YAClBqB,SAAUlC,KAAKQ,uBAGrB,yBAAK7B,UAAU,cACb,0DACA,2BACIwD,KAAK,OACLxD,UAAU,eACV+C,MAAO1B,KAAKd,MAAM4B,SAClBoB,SAAUlC,KAAKS,oBAGrB,yBAAK9B,UAAU,cACb,yCACA,6BACE,kBAAC,IAAD,CACEyD,SAAUpC,KAAKd,MAAM6B,KACrBmB,SAAUlC,KAAKU,iBAKrB,yBAAK/B,UAAU,cACb,2BAAOwD,KAAK,SAAST,MAAM,oBAAoB/C,UAAU,2B,GA7IzBE,cCCrBwD,E,kDACnB,WAAYtD,GAAQ,IAAD,8BACjB,cAAMA,IAEDwB,iBAAmB,EAAKA,iBAAiBtB,KAAtB,gBACxB,EAAKuB,oBAAsB,EAAKA,oBAAoBvB,KAAzB,gBAC3B,EAAKwB,iBAAmB,EAAKA,iBAAiBxB,KAAtB,gBACxB,EAAKyB,aAAe,EAAKA,aAAazB,KAAlB,gBACpB,EAAK0B,SAAW,EAAKA,SAAS1B,KAAd,gBAGhB,EAAKC,MAAQ,CACX0B,SAAU,GACVC,YAAa,GACbC,SAAU,EACVC,KAAM,IAAIC,KACVC,MAAO,IAfQ,E,gEAmBE,IAAD,OAClB7B,IAAMC,IAAI,UACTC,MAAK,SAAAC,GACDA,EAASG,KAAK2B,OAAS,GACxB,EAAKpB,SAAS,CACZgB,MAAO1B,EAASG,KAAK4B,KAAI,SAAAC,GAAI,OAAIA,EAAKX,YACtCA,SAAUrB,EAASG,KAAK,GAAGkB,gB,uCAMlBY,GACfxB,KAAKC,SAAS,CACZW,SAAUY,EAAEC,OAAOC,U,0CAIHF,GAClBxB,KAAKC,SAAS,CACZY,YAAaW,EAAEC,OAAOC,U,uCAITF,GACfxB,KAAKC,SAAS,CACZa,SAAUU,EAAEC,OAAOC,U,mCAIVX,GACXf,KAAKC,SAAS,CACZc,KAAMA,M,+BAIDS,GAEPA,EAAEG,iBAEF,IAAMC,EAAW,CACfhB,SAAUZ,KAAKd,MAAM0B,SACrBC,YAAab,KAAKd,MAAM2B,YACxBC,SAAUd,KAAKd,MAAM4B,SACrBC,KAAMf,KAAKd,MAAM6B,MAGnBvB,QAAQC,IAAImC,GAEZxC,IAAMyC,KAAK,iBAAkBD,GAC5BtC,MAAK,SAAAS,GAAG,OAAIP,QAAQC,IAAIM,EAAIL,SAC7BoC,OAAOC,SAAW,M,+BAKlB,OACE,6BACE,uDACA,0BAAMpB,SAAUX,KAAKW,UACnB,yBAAKhC,UAAU,cACb,6CACA,4BAAQqD,IAAI,YACVC,UAAQ,EACRtD,UAAU,eACV+C,MAAO1B,KAAKd,MAAM0B,SAClBsB,SAAUlC,KAAKO,kBAEbP,KAAKd,MAAM+B,MAAMK,KAAI,SAAUC,GAC7B,OAAO,4BACLe,IAAKf,EACLG,MAAOH,GACNA,QAMX,yBAAK5C,UAAU,cACb,gDACA,2BAAOwD,KAAK,OACVF,UAAQ,EACRtD,UAAU,eACV+C,MAAO1B,KAAKd,MAAM2B,YAClBqB,SAAUlC,KAAKQ,uBAGnB,yBAAK7B,UAAU,cACb,0DACA,2BACEwD,KAAK,OACLxD,UAAU,eACV+C,MAAO1B,KAAKd,MAAM4B,SAClBoB,SAAUlC,KAAKS,oBAGnB,yBAAK9B,UAAU,cACb,yCACA,6BACE,kBAAC,IAAD,CACEyD,SAAUpC,KAAKd,MAAM6B,KACrBmB,SAAUlC,KAAKU,iBAKrB,yBAAK/B,UAAU,cACb,2BAAOwD,KAAK,SAAST,MAAM,sBAAsB/C,UAAU,2B,GA/H3BE,aCDvB0D,E,kDACnB,WAAYxD,GAAQ,IAAD,8BACjB,cAAMA,IAEDwB,iBAAmB,EAAKA,iBAAiBtB,KAAtB,gBACxB,EAAK0B,SAAW,EAAKA,SAAS1B,KAAd,gBAEhB,EAAKC,MAAQ,CACX0B,SAAU,IAPK,E,gEAYjBZ,KAAKC,SAAS,CACZgB,MAAO,CAAC,aACRL,SAAU,gB,uCAIGY,GACfxB,KAAKC,SAAS,CACZW,SAAUY,EAAEC,OAAOC,U,+BAIdF,GAEPA,EAAEG,iBAEF,IAAMJ,EAAO,CACXX,SAAUZ,KAAKd,MAAM0B,UAEvBpB,QAAQC,IAAI8B,GAEZnC,IAAMyC,KAAK,aAAcN,GACxBjC,MAAK,SAAAS,GAAG,OAAIP,QAAQC,IAAIM,EAAIL,SAE7BM,KAAKC,SAAS,CACZW,SAAU,O,+BAUZ,OACE,6BACE,+CACA,0BAAMD,SAAUX,KAAKW,UACnB,yBAAKhC,UAAU,cACb,6CACA,2BAAQwD,KAAK,OACTF,UAAQ,EACRtD,UAAU,eACV+C,MAAO1B,KAAKd,MAAM0B,SAClBsB,SAAUlC,KAAKO,oBAGrB,yBAAK5B,UAAU,cACb,2BAAOwD,KAAK,SAAST,MAAM,cAAc/C,UAAU,2B,GA9DvBE,aCuBzB2D,MAff,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,6BACA,yBAAK7D,UAAU,aACf,kBAAC,IAAD,CAAO8D,KAAK,IAAIC,OAAK,EAACC,UAAW7D,IACjC,kBAAC,IAAD,CAAO2D,KAAK,YAAYE,UAAWC,IACnC,kBAAC,IAAD,CAAOH,KAAK,UAAUE,UAAWN,IACjC,kBAAC,IAAD,CAAOI,KAAK,QAAQE,UAAWJ,OCVjBM,QACW,cAA7Bf,OAAOC,SAASe,UAEe,UAA7BhB,OAAOC,SAASe,UAEhBhB,OAAOC,SAASe,SAAS3B,MACvB,2DCTN4B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/D,MAAK,SAAAgE,GACjCA,EAAaC,iB","file":"static/js/main.346e3bb0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\n        <Link to=\"/\" className=\"navbar-brand\">ExcerTracker</Link>\n        <div className=\"collpase navbar-collapse\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li className=\"navbar-item\">\n          <Link to=\"/\" className=\"nav-link\">Exercises</Link>\n          </li>\n          <li className=\"navbar-item\">\n          <Link to=\"/create\" className=\"nav-link\">Create Exercise Log</Link>\n          </li>\n          <li className=\"navbar-item\">\n          <Link to=\"/user\" className=\"nav-link\">Create User</Link>\n          </li>\n        </ul>\n        </div>\n      </nav>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Axios from 'axios';\n\nconst Exercise = props =>(\n  <tr>\n    <td>{props.exercise.username}</td>\n    <td>{props.exercise.description}</td>\n    <td>{props.exercise.duration}</td>\n    <td>{props.exercise.date.substring(0,10)}</td>\n    <td>\n      <Link to={\"/edit/\"+props.exercise._id}>edit</Link> | <a href=\"#\" onClick={() => {props.deleteExercise(props.exercise._id)}}>delete</a>\n    </td>\n  </tr>\n)\n\n\nexport default class ExercisesList extends Component {\n  constructor(props){\n    super(props);\n    this.deleteExercise = this.deleteExercise.bind(this);\n    this.state = {\n      exercises: []\n    };\n  }\n\n  componentDidMount(){\n    Axios.get('/exercises/')\n    .then(response =>{\n      // this.setState({\n      //   exercises: response.data\n      // })\n      console.log(\"response.data\", response.data);\n    })\n      .catch((error) => {\n        console.log(\"error found! \", error);\n    })\n  }\n\n  deleteExercise(id){\n    Axios.delete('/exercises/'+id)\n    .then(res => console.log(res.data));\n    this.setState({\n      exercises: this.state.exercises.filter(el => el._id !== id)\n    })\n  }\n\n  // TODO: CHANGE THIS SPOT TO SOMETHING OTHER THAN MAP\n  // exerciseList(){\n  //   return this.state.exercises.map(currentexercise =>{\n  //     return <Exercise exercise={currentexercise} deleteExercise={this.deleteExercise} key={currentexercise._id}/>;\n  //   })\n  // }\n\n  exerciseList() {\n    return this.state.exercises;\n  }\n\n\n  render() {\n    return (\n      <div>\n        <h3>Logged Exercises</h3>\n        <table className=\"table\">\n          <thead className=\"thead-light\">\n            <tr>\n              <th>Username</th>\n              <th>Description</th>\n              <th>Duration</th>\n              <th>Date</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n           {this.exerciseList()}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport axios from 'axios';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nexport default class EditExercise extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.onChangeDuration = this.onChangeDuration.bind(this);\n    this.onChangeDate = this.onChangeDate.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n    this.state = {\n      username: '',\n      description: '',\n      duration: 0,\n      date: new Date(),\n      users: []\n    }\n  }\n\n  componentDidMount() {\n    axios.get('/exercises/'+this.props.match.params.id)\n      .then(response => {\n        this.setState({\n          username: response.data.username,\n          description: response.data.description,\n          duration: response.data.duration,\n          date: new Date(response.data.date)\n        })   \n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n\n    axios.get('/users')\n      .then(response => {\n        if (response.data.length > 0) {\n          this.setState({\n            users: response.data.map(user => user.username),\n          })\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n\n  }\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value\n    })\n  }\n\n  onChangeDescription(e) {\n    this.setState({\n      description: e.target.value\n    })\n  }\n\n  onChangeDuration(e) {\n    this.setState({\n      duration: e.target.value\n    })\n  }\n\n  onChangeDate(date) {\n    this.setState({\n      date: date\n    })\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    const exercise = {\n      username: this.state.username,\n      description: this.state.description,\n      duration: this.state.duration,\n      date: this.state.date\n    }\n\n    console.log(exercise);\n\n    axios.post('/exercises/update/' + this.props.match.params.id, exercise)\n      .then(res => console.log(res.data));\n\n    window.location = '/';\n  }\n\n  render() {\n    return (\n    <div>\n      <h3>Edit Exercise Log</h3>\n      <form onSubmit={this.onSubmit}>\n        <div className=\"form-group\"> \n          <label>Username: </label>\n          <select ref=\"userInput\"\n              required\n              className=\"form-control\"\n              value={this.state.username}\n              onChange={this.onChangeUsername}>\n              {\n                // TODO: CHANGE THIS SPOT TO SOMETHING OTHER THAN MAP\n                // this.state.users.map(function(user) {\n                //   return <option \n                //     key={user}\n                //     value={user}>{user}\n                //     </option>;\n                // })\n              }\n          </select>\n        </div>\n        <div className=\"form-group\"> \n          <label>Description: </label>\n          <input  type=\"text\"\n              required\n              className=\"form-control\"\n              value={this.state.description}\n              onChange={this.onChangeDescription}\n              />\n        </div>\n        <div className=\"form-group\">\n          <label>Duration (in minutes): </label>\n          <input \n              type=\"text\" \n              className=\"form-control\"\n              value={this.state.duration}\n              onChange={this.onChangeDuration}\n              />\n        </div>\n        <div className=\"form-group\">\n          <label>Date: </label>\n          <div>\n            <DatePicker\n              selected={this.state.date}\n              onChange={this.onChangeDate}\n            />\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <input type=\"submit\" value=\"Edit Exercise Log\" className=\"btn btn-primary\" />\n        </div>\n      </form>\n    </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport Axios from \"axios\";\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\n\nexport default class CreateExercise extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.onChangeDuration = this.onChangeDuration.bind(this);\n    this.onChangeDate = this.onChangeDate.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n\n    this.state = {\n      username: \"\",\n      description: \"\",\n      duration: 0,\n      date: new Date(),\n      users: []\n    }\n  }\n\n  componentDidMount() {\n    Axios.get('/users')\n    .then(response =>{\n      if(response.data.length > 0){\n        this.setState({\n          users: response.data.map(user => user.username),\n          username: response.data[0].username\n        })\n      }\n    })\n  }\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value\n    });\n  }\n\n  onChangeDescription(e) {\n    this.setState({\n      description: e.target.value\n    });\n  }\n\n  onChangeDuration(e) {\n    this.setState({\n      duration: e.target.value\n    });\n  }\n\n  onChangeDate(date) {\n    this.setState({\n      date: date\n    });\n  }\n\n  onSubmit(e) {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    e.preventDefault();\n\n    const exercise = {\n      username: this.state.username,\n      description: this.state.description,\n      duration: this.state.duration,\n      date: this.state.date\n\n    };\n    console.log(exercise);\n\n    Axios.post('/exercises/add', exercise)\n    .then(res => console.log(res.data));\n    window.location = \"/\";\n   \n  };\n\n  render() {\n    return (\n      <div>\n        <h3>Create New Exercise Log</h3>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\">\n            <label>Username: </label>\n            <select ref=\"userInput\"\n              required\n              className=\"form-control\"\n              value={this.state.username}\n              onChange={this.onChangeUsername}>\n              {\n                this.state.users.map(function (user) {\n                  return <option\n                    key={user}\n                    value={user}>\n                    {user}\n                  </option>;\n                })\n              }\n            </select>\n          </div>\n          <div className=\"form-group\">\n            <label>Description: </label>\n            <input type=\"text\"\n              required\n              className=\"form-control\"\n              value={this.state.description}\n              onChange={this.onChangeDescription}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label>Duration (in minutes): </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={this.state.duration}\n              onChange={this.onChangeDuration}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label>Date: </label>\n            <div>\n              <DatePicker\n                selected={this.state.date}\n                onChange={this.onChangeDate}\n              />\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <input type=\"submit\" value=\"Create Exercise Log\" className=\"btn btn-primary\" />\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Axios from \"axios\";\n\n\nexport default class CreateUser extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n    this.state = {\n      username: \"\",\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      users: [\"test user\"],\n      username: \"test user\"\n    })\n  }\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value\n    });\n  }\n\n  onSubmit(e) {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    e.preventDefault();\n\n    const user = {\n      username: this.state.username,\n    }\n    console.log(user);\n\n    Axios.post('/users/add', user)\n    .then(res => console.log(res.data));\n\n    this.setState({\n      username: \"\",\n    })\n\n\n  };\n\n\n\n\n  render() {\n    return (\n      <div>\n        <h3>Create New User</h3>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\"> \n            <label>Username: </label>\n            <input  type=\"text\"\n                required\n                className=\"form-control\"\n                value={this.state.username}\n                onChange={this.onChangeUsername}\n                />\n          </div>\n          <div className=\"form-group\">\n            <input type=\"submit\" value=\"Create User\" className=\"btn btn-primary\" />\n          </div>\n        </form>\n      </div>\n    )\n  }\n}","import React from 'react'\n// import './App.scss';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport Navbar from \"./components/navbar.component\";\nimport ExercisesList from \"./components/exercises-list.component\";\nimport EditExercises from \"./components/edit-exercises.component\";\nimport CreateExercise from \"./components/create-exercise.component\";\nimport CreateUser from \"./components/create-user.component\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <br />\n      <div className=\"container\">\n      <Route path=\"/\" exact component={ExercisesList} />\n      <Route path=\"/edit/:id\" component={EditExercises} />\n      <Route path=\"/create\" component={CreateExercise} />\n      <Route path=\"/user\" component={CreateUser} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.scss';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}